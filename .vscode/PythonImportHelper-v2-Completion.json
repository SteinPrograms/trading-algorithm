[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "mean",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "dataclasses",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dataclasses",
        "description": "dataclasses",
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Indicator",
        "importPath": "indicator",
        "description": "indicator",
        "isExtraImport": true,
        "detail": "indicator",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "psycopg2.extras",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "DrawdownException",
        "kind": 6,
        "importPath": "app.bot_exceptions",
        "description": "app.bot_exceptions",
        "peekOfCode": "class DrawdownException(Exception):\n    \"\"\"Exception raised on drawdown exceed\"\"\"\nclass ServerStopException(Exception):\n    \"\"\"Exception raised on Server stop\"\"\"\nclass WebsocketException(Exception):\n    \"\"\"Exception raised on websocket connection exception\"\"\"\nclass NullBalanceException(Exception):\n    \"\"\"Exception raised on balance fetched 0\"\"\"\nclass BrokerConnectionException(Exception):\n    \"\"\"Exception raised on broker connection error\"\"\"",
        "detail": "app.bot_exceptions",
        "documentation": {}
    },
    {
        "label": "ServerStopException",
        "kind": 6,
        "importPath": "app.bot_exceptions",
        "description": "app.bot_exceptions",
        "peekOfCode": "class ServerStopException(Exception):\n    \"\"\"Exception raised on Server stop\"\"\"\nclass WebsocketException(Exception):\n    \"\"\"Exception raised on websocket connection exception\"\"\"\nclass NullBalanceException(Exception):\n    \"\"\"Exception raised on balance fetched 0\"\"\"\nclass BrokerConnectionException(Exception):\n    \"\"\"Exception raised on broker connection error\"\"\"\nclass OrderException(Exception):\n    \"\"\"Exception raised on order error\"\"\"",
        "detail": "app.bot_exceptions",
        "documentation": {}
    },
    {
        "label": "WebsocketException",
        "kind": 6,
        "importPath": "app.bot_exceptions",
        "description": "app.bot_exceptions",
        "peekOfCode": "class WebsocketException(Exception):\n    \"\"\"Exception raised on websocket connection exception\"\"\"\nclass NullBalanceException(Exception):\n    \"\"\"Exception raised on balance fetched 0\"\"\"\nclass BrokerConnectionException(Exception):\n    \"\"\"Exception raised on broker connection error\"\"\"\nclass OrderException(Exception):\n    \"\"\"Exception raised on order error\"\"\"\nclass DatabaseException(Exception):\n    \"\"\"Exception raised on database error\"\"\"",
        "detail": "app.bot_exceptions",
        "documentation": {}
    },
    {
        "label": "NullBalanceException",
        "kind": 6,
        "importPath": "app.bot_exceptions",
        "description": "app.bot_exceptions",
        "peekOfCode": "class NullBalanceException(Exception):\n    \"\"\"Exception raised on balance fetched 0\"\"\"\nclass BrokerConnectionException(Exception):\n    \"\"\"Exception raised on broker connection error\"\"\"\nclass OrderException(Exception):\n    \"\"\"Exception raised on order error\"\"\"\nclass DatabaseException(Exception):\n    \"\"\"Exception raised on database error\"\"\"\nclass DataSizeException(Exception):\n    \"\"\"Exception raised on when size of data is too short\"\"\"",
        "detail": "app.bot_exceptions",
        "documentation": {}
    },
    {
        "label": "BrokerConnectionException",
        "kind": 6,
        "importPath": "app.bot_exceptions",
        "description": "app.bot_exceptions",
        "peekOfCode": "class BrokerConnectionException(Exception):\n    \"\"\"Exception raised on broker connection error\"\"\"\nclass OrderException(Exception):\n    \"\"\"Exception raised on order error\"\"\"\nclass DatabaseException(Exception):\n    \"\"\"Exception raised on database error\"\"\"\nclass DataSizeException(Exception):\n    \"\"\"Exception raised on when size of data is too short\"\"\"",
        "detail": "app.bot_exceptions",
        "documentation": {}
    },
    {
        "label": "OrderException",
        "kind": 6,
        "importPath": "app.bot_exceptions",
        "description": "app.bot_exceptions",
        "peekOfCode": "class OrderException(Exception):\n    \"\"\"Exception raised on order error\"\"\"\nclass DatabaseException(Exception):\n    \"\"\"Exception raised on database error\"\"\"\nclass DataSizeException(Exception):\n    \"\"\"Exception raised on when size of data is too short\"\"\"",
        "detail": "app.bot_exceptions",
        "documentation": {}
    },
    {
        "label": "DatabaseException",
        "kind": 6,
        "importPath": "app.bot_exceptions",
        "description": "app.bot_exceptions",
        "peekOfCode": "class DatabaseException(Exception):\n    \"\"\"Exception raised on database error\"\"\"\nclass DataSizeException(Exception):\n    \"\"\"Exception raised on when size of data is too short\"\"\"",
        "detail": "app.bot_exceptions",
        "documentation": {}
    },
    {
        "label": "DataSizeException",
        "kind": 6,
        "importPath": "app.bot_exceptions",
        "description": "app.bot_exceptions",
        "peekOfCode": "class DataSizeException(Exception):\n    \"\"\"Exception raised on when size of data is too short\"\"\"",
        "detail": "app.bot_exceptions",
        "documentation": {}
    },
    {
        "label": "Indicator",
        "kind": 6,
        "importPath": "app.indicator",
        "description": "app.indicator",
        "peekOfCode": "class Indicator:\n    \"\"\"\n    Indicator of technical analysis\n    \"\"\"\n    def __init__(self):\n        self.signal = 'initialize'\n    def get_klines(self,symbol):\n        \"\"\"\n        Get latest klines from binance API\n        Returns:",
        "detail": "app.indicator",
        "documentation": {}
    },
    {
        "label": "Prices",
        "kind": 6,
        "importPath": "app.position",
        "description": "app.position",
        "peekOfCode": "class Prices:\n    \"\"\"\n    Differents prices of the positions \n    -> could be visualized as a kline\n    \"\"\"\n    open : float = 0.0\n    close : float = 0.0\n    highest : float = 0.0\n    lowest : float = 0.0\n    current : float = 0.0",
        "detail": "app.position",
        "documentation": {}
    },
    {
        "label": "Times",
        "kind": 6,
        "importPath": "app.position",
        "description": "app.position",
        "peekOfCode": "class Times:\n    \"\"\"\n    Times of the position\n    \"\"\"\n    open : datetime = datetime.now()\n    close : datetime = datetime.now()\n@dataclasses.dataclass\nclass Settings:\n    \"\"\"\n    Settings of the position",
        "detail": "app.position",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.position",
        "description": "app.position",
        "peekOfCode": "class Settings:\n    \"\"\"\n    Settings of the position\n    \"\"\"\n    status : 'close' or 'open' = 'close'\n    quote : str = 'USDT'\n    asset : str = 'BTC'\n    symbol : str = asset+quote\n    fee : float = 0.1/100\n    stop_loss : float = 2/100",
        "detail": "app.position",
        "documentation": {}
    },
    {
        "label": "Position",
        "kind": 6,
        "importPath": "app.position",
        "description": "app.position",
        "peekOfCode": "class Position:\n    \"\"\"\n    A position is a trade\n    \"\"\"\n    def __init__(self):\n        self.settings = Settings()\n        self.prices = Prices()\n        self.times = Times()        \n    def open_position(self):\n        \"\"\"",
        "detail": "app.position",
        "documentation": {}
    },
    {
        "label": "effective_yield_calculation",
        "kind": 2,
        "importPath": "app.position",
        "description": "app.position",
        "peekOfCode": "def effective_yield_calculation(current_price, opening_price, fee):\n    \"\"\"\n    Computes yield considering fees and current price\n    \"\"\"\n    return_on_investment = float(current_price) / float(opening_price)\n    fee = float(fee)\n    return (return_on_investment - (\n        fee + (1 - fee) * return_on_investment * fee\n        )\n    )",
        "detail": "app.position",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 2,
        "importPath": "helpers.database",
        "description": "helpers.database",
        "peekOfCode": "def select(\n        self,\n        *,\n        query: str,\n        params: tuple = None,\n    ):\n    \"\"\"Create a temporary connection to the database, execute a query and return the result\"\"\"\n    try:\n        with psycopg2.connect(\n            host=os.getenv('POSTGRES_HOST'),",
        "detail": "helpers.database",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "helpers.database",
        "description": "helpers.database",
        "peekOfCode": "def insert(\n        self,\n        *,\n        query: str,\n        params: tuple = None,\n    ):\n    \"\"\"Create a temporary connection to the database and execute a query\"\"\"\n    try:\n        with psycopg2.connect(\n            host=os.getenv('POSTGRES_HOST'),",
        "detail": "helpers.database",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "helpers.telegram",
        "description": "helpers.telegram",
        "peekOfCode": "def send_message(self,message):\n    requests.post(url=f\"https://api.telegram.org/bot{os.getenv('TELEGRAM_TOKEN')}/sendMessage\",params={\n        \"chat_id\":os.getenv('TELEGRAM_CHAT_ID'),\n        \"text\":message\n    })",
        "detail": "helpers.telegram",
        "documentation": {}
    }
]